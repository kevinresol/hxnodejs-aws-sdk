package global.aws.opsworkscm;

typedef Server = {
	/**
		Associate a public IP address with a server that you are launching.
	**/
	@:optional
	var AssociatePublicIpAddress : Bool;
	/**
		The number of automated backups to keep.
	**/
	@:optional
	var BackupRetentionCount : Float;
	/**
		The name of the server.
	**/
	@:optional
	var ServerName : String;
	/**
		Time stamp of server creation. Example 2016-07-29T13:38:47.520Z
	**/
	@:optional
	var CreatedAt : js.lib.Date;
	/**
		The ARN of the CloudFormation stack that was used to create the server.
	**/
	@:optional
	var CloudFormationStackArn : String;
	/**
		An optional public endpoint of a server, such as https://aws.my-company.com. You cannot access the server by using the Endpoint value if the server has a CustomDomain specified.
	**/
	@:optional
	var CustomDomain : String;
	/**
		Disables automated backups. The number of stored backups is dependent on the value of PreferredBackupCount.
	**/
	@:optional
	var DisableAutomatedBackup : Bool;
	/**
		A DNS name that can be used to access the engine. Example: myserver-asdfghjkl.us-east-1.opsworks.io. You cannot access the server by using the Endpoint value if the server has a CustomDomain specified.
	**/
	@:optional
	var Endpoint : String;
	/**
		The engine type of the server. Valid values in this release include ChefAutomate and Puppet.
	**/
	@:optional
	var Engine : String;
	/**
		The engine model of the server. Valid values in this release include Monolithic for Puppet and Single for Chef.
	**/
	@:optional
	var EngineModel : String;
	/**
		The response of a createServer() request returns the master credential to access the server in EngineAttributes. These credentials are not stored by AWS OpsWorks CM; they are returned only as part of the result of createServer().   Attributes returned in a createServer response for Chef     CHEF_AUTOMATE_PIVOTAL_KEY: A base64-encoded RSA private key that is generated by AWS OpsWorks for Chef Automate. This private key is required to access the Chef API.    CHEF_STARTER_KIT: A base64-encoded ZIP file. The ZIP file contains a Chef starter kit, which includes a README, a configuration file, and the required RSA private key. Save this file, unzip it, and then change to the directory where you've unzipped the file contents. From this directory, you can run Knife commands.    Attributes returned in a createServer response for Puppet     PUPPET_STARTER_KIT: A base64-encoded ZIP file. The ZIP file contains a Puppet starter kit, including a README and a required private key. Save this file, unzip it, and then change to the directory where you've unzipped the file contents.    PUPPET_ADMIN_PASSWORD: An administrator password that you can use to sign in to the Puppet Enterprise console after the server is online.
	**/
	@:optional
	var EngineAttributes : EngineAttributes;
	/**
		The engine version of the server. For a Chef server, the valid value for EngineVersion is currently 2. For a Puppet server, the valid value is 2017.
	**/
	@:optional
	var EngineVersion : String;
	/**
		The instance profile ARN of the server.
	**/
	@:optional
	var InstanceProfileArn : String;
	/**
		The instance type for the server, as specified in the CloudFormation stack. This might not be the same instance type that is shown in the EC2 console.
	**/
	@:optional
	var InstanceType : String;
	/**
		The key pair associated with the server.
	**/
	@:optional
	var KeyPair : String;
	/**
		The status of the most recent server maintenance run. Shows SUCCESS or FAILED.
	**/
	@:optional
	var MaintenanceStatus : String;
	/**
		The preferred maintenance period specified for the server.
	**/
	@:optional
	var PreferredMaintenanceWindow : String;
	/**
		The preferred backup period specified for the server.
	**/
	@:optional
	var PreferredBackupWindow : String;
	/**
		The security group IDs for the server, as specified in the CloudFormation stack. These might not be the same security groups that are shown in the EC2 console.
	**/
	@:optional
	var SecurityGroupIds : Strings;
	/**
		The service role ARN used to create the server.
	**/
	@:optional
	var ServiceRoleArn : String;
	/**
		The server's status. This field displays the states of actions in progress, such as creating, running, or backing up the server, as well as the server's health state.
	**/
	@:optional
	var Status : String;
	/**
		Depending on the server status, this field has either a human-readable message (such as a create or backup error), or an escaped block of JSON (used for health check results).
	**/
	@:optional
	var StatusReason : String;
	/**
		The subnet IDs specified in a CreateServer request.
	**/
	@:optional
	var SubnetIds : Strings;
	/**
		The ARN of the server.
	**/
	@:optional
	var ServerArn : String;
};